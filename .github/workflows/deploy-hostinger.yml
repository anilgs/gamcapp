name: Deploy to Hostinger

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'
  FTP_HOST: ${{ vars.FTP_HOST }}
  FTP_USERNAME: ${{ vars.FTP_USERNAME }}
  FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
  SMTP_HOST: ${{ vars.SMTP_HOST }}
  SMTP_PORT: ${{ vars.SMTP_PORT }}
  SMTP_SECURE: ${{ vars.SMTP_SECURE }}
  ADMIN_EMAIL: ${{ vars.ADMIN_EMAIL }}
  FROM_EMAIL: ${{ vars.FROM_EMAIL }}
  FROM_NAME: ${{ vars.FROM_NAME }}
  DB_HOST: ${{ vars.DB_HOST }}
  DB_PORT: ${{ vars.DB_PORT }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_USER: ${{ vars.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  FRONTEND_URL: ${{ vars.FRONTEND_URL }}
  RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
  RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}
  DOMAIN: ${{ vars.DOMAIN }}

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pgsql, curl, json
          tools: composer

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --no-dev --optimize-autoloader

      - name: Run frontend type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run PHP syntax check
        working-directory: ./backend
        run: find src -name "*.php" -exec php -l {} \;

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer

      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          
          # Ensure vendor directory is properly created for shared hosting
          composer dump-autoload --optimize --no-dev
          
          # Verify critical dependencies are installed
          echo "Verifying Composer dependencies..."
          php -r "require 'vendor/autoload.php'; echo 'Autoloader working correctly\n';"

      - name: Create deployment package
        run: |
           echo "=== Pre-deployment Backend Verification ==="
           echo "Backend directory contents:"
           ls -la backend/ || echo "Backend directory not found"
           echo ""
           echo "Checking for vendor directory:"
           if [ -d "backend/vendor" ]; then
             echo "✅ Vendor directory exists"
             echo "Vendor size: $(du -sh backend/vendor)"
             echo "Autoloader exists: $(test -f backend/vendor/autoload.php && echo 'yes' || echo 'no')"
           else
             echo "❌ Vendor directory missing before deployment"
           fi
           echo ""
           
           echo "=== Creating Deployment Package ==="
           mkdir -p deployment/frontend
           mkdir -p deployment/backend
           
           echo "Preparing frontend files..."
           cp -r frontend/dist/* deployment/frontend/
           cp apache-config/.htaccess deployment/frontend/
           
           echo "Copying backend directory..."
           if [ -d "backend" ]; then
             cp -r backend/* deployment/backend/ || {
               echo "❌ Failed to copy backend directory"
               echo "Backend source contents:"
               ls -la backend/
               exit 1
             }
             echo "✅ Backend directory copied successfully"
           else
             echo "❌ Backend directory not found for copying"
             exit 1
           fi
           
            # Add PHP test files for debugging (only to frontend/public for testing)
            cp phpinfo.php deployment/frontend/
            cp simple-test.php deployment/frontend/
            cp routing-test.php deployment/frontend/
            cp backend-diagnostics.php deployment/frontend/
            cp filesystem-diagnostic.php deployment/frontend/
            cp simple-backend-test.php deployment/frontend/
            cp minimal-backend-index.php deployment/frontend/
            cp fix-permissions.php deployment/frontend/
            cp api.php deployment/frontend/
 
            # Create environment file for development
           echo "DB_HOST=${{ env.DB_HOST }}" >> deployment/backend/.env
           echo "DB_PORT=${{ env.DB_PORT }}" >> deployment/backend/.env
           echo "DB_NAME=${{ env.DB_NAME }}" >> deployment/backend/.env
           echo "DB_USER=${{ env.DB_USER }}" >> deployment/backend/.env
           echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> deployment/backend/.env
           echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> deployment/backend/.env
           echo "APP_ENV=development" >> deployment/backend/.env
           echo "RAZORPAY_KEY_ID=${{ env.RAZORPAY_KEY_ID }}" >> deployment/backend/.env
           echo "RAZORPAY_KEY_SECRET=${{ env.RAZORPAY_KEY_SECRET }}" >> deployment/backend/.env
           echo "FRONTEND_URL=${{ env.FRONTEND_URL }}" >> deployment/backend/.env
           echo "SMTP_HOST=${{ env.SMTP_HOST }}" >> deployment/backend/.env
           echo "SMTP_PORT=${{ env.SMTP_PORT }}" >> deployment/backend/.env
           echo "SMTP_SECURE=${{ env.SMTP_SECURE }}" >> deployment/backend/.env
           echo "ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}" >> deployment/backend/.env
           echo "FROM_EMAIL=${{ env.FROM_EMAIL }}" >> deployment/backend/.env
           echo "FROM_NAME=${{ env.FROM_NAME }}" >> deployment/backend/.env
           echo "BYPASS_PHONE_VERIFICATION=true" >> deployment/backend/.env
          
      - name: Deploy Backend to Secure Location (Dev)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_HOST }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          local-dir: ./deployment/backend/
          server-dir: /public_html/dev/backend/
          log-level: verbose

      - name: Deploy Frontend to Public Directory (Dev)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_HOST }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          local-dir: ./deployment/frontend/
          server-dir: /public_html/dev/
          log-level: verbose

      - name: Fix Backend File Permissions (Dev)
        run: |
          echo "Setting correct file permissions for PHP execution in development..."
          
          # Use the permission fix script deployed with the frontend
          echo "Calling development permission fix script..."
          DEV_URL="${{ env.FRONTEND_URL }}"
          if [[ "$DEV_URL" == *"/dev"* ]]; then
            DEV_PERMISSION_URL="$DEV_URL"
          else
            DEV_PERMISSION_URL="${DEV_URL%/}/dev"
          fi
          
          PERMISSION_RESPONSE=$(curl -s -X POST "$DEV_PERMISSION_URL/fix-permissions.php" \
               -d "action=fix_backend_permissions" 2>&1 || echo "curl_failed")
          
          if [ "$PERMISSION_RESPONSE" != "curl_failed" ]; then
            echo "Permission fix script response:"
            echo "$PERMISSION_RESPONSE"
            
            # Check if the response indicates success
            if echo "$PERMISSION_RESPONSE" | grep -q '"success":true'; then
              echo "✅ File permissions fixed successfully"
            else
              echo "⚠️  Permission fix script completed but may have encountered issues"
            fi
          else
            echo "❌ Failed to call permission fix script"
          fi

      - name: Initialize Database
        run: |
          echo "Checking database connectivity and initialization status for development..."
          
          # Install MySQL client for database operations
          sudo apt-get update && sudo apt-get install -y mysql-client netcat-openbsd
          
          # Check if database exists and needs initialization
          DB_EXISTS=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='${{ env.DB_NAME }}';" \
                      --skip-column-names --batch 2>/dev/null | wc -l)
          
          if [ "$DB_EXISTS" -eq 0 ]; then
            echo "Database '${{ env.DB_NAME }}' does not exist. Creating and initializing..."
            
            # Create database
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  -e "CREATE DATABASE IF NOT EXISTS \`${{ env.DB_NAME }}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            
            # Apply schema
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  "${{ env.DB_NAME }}" < backend/database/schema.sql
            
            # Apply seed data if exists
            if [ -f "backend/database/seed.sql" ]; then
              echo "Applying seed data..."
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/seed.sql
            fi
            
            echo "Database initialization completed successfully!"
          else
            echo "Database '${{ env.DB_NAME }}' already exists."
            
            # Check if database has required tables
            TABLE_COUNT=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                          "${{ env.DB_NAME }}" -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='${{ env.DB_NAME }}';" \
                          --skip-column-names --batch 2>/dev/null)
            
            if [ "$TABLE_COUNT" -lt 4 ]; then
              echo "Database exists but appears empty (found $TABLE_COUNT tables). Initializing schema..."
              
              # Apply schema
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/schema.sql
              
              # Apply seed data if exists
              if [ -f "backend/database/seed.sql" ]; then
                echo "Applying seed data..."
                mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      "${{ env.DB_NAME }}" < backend/database/seed.sql
              fi
              
              echo "Database schema initialization completed!"
            else
              echo "Database is properly initialized with $TABLE_COUNT tables."
            fi
          fi
          
          # Verify database setup
          echo "Verifying database setup..."
          TABLES=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                   "${{ env.DB_NAME }}" -e "SHOW TABLES;" --skip-column-names --batch 2>/dev/null)
          echo "Database tables found:"
          echo "$TABLES"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer

      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          
          # Ensure vendor directory is properly created for shared hosting
          composer dump-autoload --optimize --no-dev
          
          # Verify critical dependencies are installed
          echo "Verifying Composer dependencies..."
          php -r "require 'vendor/autoload.php'; echo 'Autoloader working correctly\n';"

      - name: Create deployment package
        run: |
          echo "=== Pre-deployment Backend Verification ==="
          echo "Backend directory contents:"
          ls -la backend/ || echo "Backend directory not found"
          echo ""
          echo "Checking for vendor directory:"
          if [ -d "backend/vendor" ]; then
            echo "✅ Vendor directory exists"
            echo "Vendor size: $(du -sh backend/vendor)"
            echo "Autoloader exists: $(test -f backend/vendor/autoload.php && echo 'yes' || echo 'no')"
          else
            echo "❌ Vendor directory missing before deployment"
          fi
          echo ""
          
           echo "=== Creating Deployment Package ==="
           mkdir -p deployment/frontend
           mkdir -p deployment/backend
           
           echo "Preparing frontend files..."
           cp -r frontend/dist/* deployment/frontend/
           cp apache-config/.htaccess deployment/frontend/
           
           echo "Copying backend directory..."
           if [ -d "backend" ]; then
             cp -r backend/* deployment/backend/ || {
               echo "❌ Failed to copy backend directory"
               echo "Backend source contents:"
               ls -la backend/
               exit 1
             }
             echo "✅ Backend directory copied successfully"
           else
             echo "❌ Backend directory not found for copying"
             exit 1
           fi
          
           
            # Add PHP test files for debugging (only to frontend/public for testing)
            cp phpinfo.php deployment/frontend/
            cp simple-test.php deployment/frontend/
            cp routing-test.php deployment/frontend/
            cp backend-diagnostics.php deployment/frontend/
            cp filesystem-diagnostic.php deployment/frontend/
            cp simple-backend-test.php deployment/frontend/
            cp minimal-backend-index.php deployment/frontend/
            cp fix-permissions.php deployment/frontend/
            cp api.php deployment/frontend/
           # Create environment file for production
          echo "DB_HOST=${{ env.DB_HOST }}" >> deployment/backend/.env
          echo "DB_PORT=${{ env.DB_PORT }}" >> deployment/backend/.env
          echo "DB_NAME=${{ env.DB_NAME }}" >> deployment/backend/.env
          echo "DB_USER=${{ env.DB_USER }}" >> deployment/backend/.env
          echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> deployment/backend/.env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> deployment/backend/.env
          echo "APP_ENV=production" >> deployment/backend/.env
          echo "RAZORPAY_KEY_ID=${{ env.RAZORPAY_KEY_ID }}" >> deployment/backend/.env
          echo "RAZORPAY_KEY_SECRET=${{ env.RAZORPAY_KEY_SECRET }}" >> deployment/backend/.env
          echo "FRONTEND_URL=${{ env.FRONTEND_URL }}" >> deployment/backend/.env
          echo "SMTP_HOST=${{ env.SMTP_HOST }}" >> deployment/backend/.env
          echo "SMTP_PORT=${{ env.SMTP_PORT }}" >> deployment/backend/.env
          echo "SMTP_SECURE=${{ env.SMTP_SECURE }}" >> deployment/backend/.env
          echo "SMTP_USER=${{ env.SMTP_USER }}" >> deployment/backend/.env
          echo "SMTP_PASS=${{ env.SMTP_PASS }}" >> deployment/backend/.env
          echo "ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}" >> deployment/backend/.env
          echo "FROM_EMAIL=${{ env.FROM_EMAIL }}" >> deployment/backend/.env
          echo "FROM_NAME=${{ env.FROM_NAME }}" >> deployment/backend/.env
          echo "BYPASS_PHONE_VERIFICATION=true" >> deployment/backend/.env
          echo "FTP_HOST=${{ env.FTP_HOST }}" >> deployment/backend/.env
          echo "FTP_USERNAME=${{ env.FTP_USERNAME }}" >> deployment/backend/.env
          echo "FTP_PASSWORD=${{ env.FTP_PASSWORD }}" >> deployment/backend/.env

      - name: Verify Deployment Package
        run: |
           echo "=== Deployment Package Verification ==="
           echo "Checking deployment directory structure..."
           
           if [ -d "deployment" ]; then
             echo "✅ Deployment directory exists"
             echo "Contents:"
             find deployment -type f | head -20
             echo ""
             echo "Directory structure:"
             find deployment -type d | sort
             echo ""
             
             # Check frontend files
             if [ -f "deployment/frontend/.htaccess" ]; then
               echo "✅ Frontend .htaccess file present"
             else
               echo "❌ Frontend .htaccess file missing"
             fi
             
             if [ -f "deployment/frontend/index.html" ]; then
               echo "✅ Frontend index.html present"
             else
               echo "❌ Frontend index.html missing"
             fi
             
             # Check backend files
             if [ -f "deployment/backend/public/index.php" ]; then
               echo "✅ Backend index.php present"
             else
               echo "❌ Backend index.php missing"
             fi
             
             if [ -f "deployment/backend/.env" ]; then
               echo "✅ Backend .env file present"
               echo "Environment variables count: $(wc -l < deployment/backend/.env)"
               echo "File size: $(ls -lh deployment/backend/.env 2>/dev/null | awk '{print $5}')"
               echo "Contains DB_HOST: $(grep -q 'DB_HOST=' deployment/backend/.env && echo 'yes' || echo 'no')"
             else
               echo "❌ Backend .env file missing"
               if [ -d "deployment/backend" ]; then
                 echo "Backend directory exists but .env missing:"
                 ls -la deployment/backend/ 2>/dev/null || echo "backend directory not readable"
               else
                 echo "❌ Backend directory does not exist in deployment package!"
                 echo "Deployment contents:"
                 ls -la deployment/ 2>/dev/null || echo "deployment directory not readable"
               fi
             fi
             
             if [ -f "deployment/backend/vendor/autoload.php" ]; then
               echo "✅ Composer vendor directory present"
               echo "Vendor directory size: $(du -sh deployment/backend/vendor 2>/dev/null || echo 'unknown')"
               echo "Autoloader file size: $(ls -lh deployment/backend/vendor/autoload.php 2>/dev/null || echo 'file not found')"
             else
               echo "❌ Composer vendor directory missing"
               echo "Backend directory contents:"
               ls -la deployment/backend/ 2>/dev/null || echo "backend directory not accessible"
               echo "Looking for vendor directory:"
               find deployment/backend -name "vendor" -type d 2>/dev/null || echo "No vendor directory found"
             fi
             
           else
             echo "❌ Deployment directory does not exist!"
           fi

      - name: Deploy Backend to Secure Location
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_HOST }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          local-dir: ./deployment/backend/
          server-dir: /domains/${{ env.DOMAIN }}/backend/
          log-level: verbose

      - name: Fix Backend File Permissions
        run: |
          echo "Setting correct file permissions for PHP execution..."
          
          # Use the permission fix script deployed with the frontend
          echo "Calling permission fix script..."
          PERMISSION_RESPONSE=$(curl -s -X POST "${{ env.FRONTEND_URL }}/fix-permissions.php" \
               -d "action=fix_backend_permissions" 2>&1 || echo "curl_failed")
          
          if [ "$PERMISSION_RESPONSE" != "curl_failed" ]; then
            echo "Permission fix script response:"
            echo "$PERMISSION_RESPONSE"
            
            # Check if the response indicates success
            if echo "$PERMISSION_RESPONSE" | grep -q '"success":true'; then
              echo "✅ File permissions fixed successfully"
            else
              echo "⚠️  Permission fix script completed but may have encountered issues"
            fi
          else
            echo "❌ Failed to call permission fix script"
          fi

      - name: Deploy Frontend to Public Directory
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_HOST }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          local-dir: ./deployment/frontend/
          server-dir: /domains/${{ env.DOMAIN }}/public_html/
          log-level: verbose

      - name: Initialize Database
        run: |
          echo "Checking database connectivity and initialization status..."
          
          # Install MySQL client for database operations
          sudo apt-get update && sudo apt-get install -y mysql-client netcat-openbsd
          
          # Check if database exists and needs initialization
          DB_EXISTS=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='${{ env.DB_NAME }}';" \
                      --skip-column-names --batch 2>/dev/null | wc -l)
          
          if [ "$DB_EXISTS" -eq 0 ]; then
            echo "Database '${{ env.DB_NAME }}' does not exist. Creating and initializing..."
            
            # Create database
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  -e "CREATE DATABASE IF NOT EXISTS \`${{ env.DB_NAME }}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            
            # Apply schema
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  "${{ env.DB_NAME }}" < backend/database/schema.sql
            
            # Apply seed data if exists
            if [ -f "backend/database/seed.sql" ]; then
              echo "Applying seed data..."
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/seed.sql
            fi
            
            echo "Database initialization completed successfully!"
          else
            echo "Database '${{ env.DB_NAME }}' already exists."
            
            # Check if database has required tables
            TABLE_COUNT=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                          "${{ env.DB_NAME }}" -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='${{ env.DB_NAME }}';" \
                          --skip-column-names --batch 2>/dev/null)
            
            if [ "$TABLE_COUNT" -lt 4 ]; then
              echo "Database exists but appears empty (found $TABLE_COUNT tables). Initializing schema..."
              
              # Apply schema
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/schema.sql
              
              # Apply seed data if exists
              if [ -f "backend/database/seed.sql" ]; then
                echo "Applying seed data..."
                mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      "${{ env.DB_NAME }}" < backend/database/seed.sql
              fi
              
              echo "Database schema initialization completed!"
            else
              echo "Database is properly initialized with $TABLE_COUNT tables."
            fi
          fi
          
          # Verify database setup
          echo "Verifying database setup..."
          TABLES=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                   "${{ env.DB_NAME }}" -e "SHOW TABLES;" --skip-column-names --batch 2>/dev/null)
          echo "Database tables found:"
          echo "$TABLES"

      - name: Setup PHP Environment (Post-Deployment)
        run: |
          echo "PHP environment setup completed via FTP deployment."
          echo "Note: Shared hosting providers typically handle PHP configuration automatically."
          echo "Composer autoloader optimization and file permissions are set during FTP upload."
          
           # Log deployment completion
           echo "✅ Backend files deployed to: /domains/${{ env.DOMAIN }}/backend/ (SECURE - not publicly accessible)"
           echo "✅ Frontend files deployed to: /domains/${{ env.DOMAIN }}/public_html/ (PUBLIC)"
           echo "✅ Environment file created with production settings in secure backend directory"
           echo "✅ Apache .htaccess configuration deployed to route API calls to secure backend"

      - name: Comprehensive Health Check
        run: |
          set +e  # Don't exit on errors, continue with all tests
          
          echo "Running comprehensive health checks..."
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          # Basic connectivity test
          echo "=== Basic Connectivity Test ==="
          if curl -I -s "${{ env.FRONTEND_URL }}" | head -1; then
            echo "✅ Domain is accessible"
          else
            echo "❌ Domain not accessible"
          fi
          echo ""
          
          # Test file structure
          echo "=== File Structure Tests ==="
          
          # Test .htaccess
          echo "Testing .htaccess accessibility..."
          curl -I -s "${{ env.FRONTEND_URL }}/.htaccess" | head -1 || echo "❌ .htaccess not accessible (expected)"
          
           # Security verification tests
           echo "=== Security Verification Tests ==="
           echo "Testing that backend is not publicly accessible..."
           
           # Test that backend directory is not accessible
           BACKEND_ACCESS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.FRONTEND_URL }}/backend/" 2>/dev/null || echo "000")
           if [ "$BACKEND_ACCESS" = "404" ] || [ "$BACKEND_ACCESS" = "403" ]; then
             echo "✅ Backend directory properly secured (HTTP $BACKEND_ACCESS)"
           else
             echo "⚠️  Backend directory may be accessible (HTTP $BACKEND_ACCESS)"
           fi
           
           # Test that backend source files are not accessible
           BACKEND_SRC_ACCESS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.FRONTEND_URL }}/backend/src/" 2>/dev/null || echo "000")
           if [ "$BACKEND_SRC_ACCESS" = "404" ] || [ "$BACKEND_SRC_ACCESS" = "403" ]; then
             echo "✅ Backend source directory properly secured (HTTP $BACKEND_SRC_ACCESS)"
           else
             echo "⚠️  Backend source directory may be accessible (HTTP $BACKEND_SRC_ACCESS)"
           fi
           
           # Test that .env file is not accessible
           ENV_ACCESS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.FRONTEND_URL }}/backend/.env" 2>/dev/null || echo "000")
           if [ "$ENV_ACCESS" = "404" ] || [ "$ENV_ACCESS" = "403" ]; then
             echo "✅ Environment file properly secured (HTTP $ENV_ACCESS)"
           else
             echo "❌ SECURITY RISK: Environment file may be accessible (HTTP $ENV_ACCESS)"
           fi
           
           # Test that vendor directory is not accessible
           VENDOR_ACCESS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.FRONTEND_URL }}/backend/vendor/" 2>/dev/null || echo "000")
           if [ "$VENDOR_ACCESS" = "404" ] || [ "$VENDOR_ACCESS" = "403" ]; then
             echo "✅ Vendor directory properly secured (HTTP $VENDOR_ACCESS)"
           else
             echo "⚠️  Vendor directory may be accessible (HTTP $VENDOR_ACCESS)"
           fi
           echo ""
          
           # Test PHP execution via simple test files
           echo "=== PHP Execution Test ==="
           echo "Testing basic PHP execution..."
          
          # Test super simple PHP file first
          echo "Testing simple-test.php..."
          SIMPLE_PHP_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/simple-test.php" 2>&1 || echo "curl_failed")
          if [ "$SIMPLE_PHP_RESPONSE" != "curl_failed" ]; then
            if echo "$SIMPLE_PHP_RESPONSE" | grep -q "PHP is working"; then
              echo "✅ Simple PHP test working"
              echo "Response: ${SIMPLE_PHP_RESPONSE}"
            else
              echo "❌ Simple PHP test failed"
              echo "Response (first 500 chars): ${SIMPLE_PHP_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach simple-test.php"
          fi
          echo ""
          
          # Test phpinfo
          echo "Testing phpinfo.php..."
          PHPINFO_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/phpinfo.php" 2>&1 || echo "curl_failed")
          if [ "$PHPINFO_RESPONSE" != "curl_failed" ]; then
            if echo "$PHPINFO_RESPONSE" | grep -q "PHP Version"; then
              echo "✅ phpinfo.php working"
              echo "PHP Version detected in response"
            else
              echo "❌ phpinfo.php not working properly"
              echo "Response (first 500 chars): ${PHPINFO_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach phpinfo.php"
          fi
          echo ""
          
           # Test API routing through secure backend
           echo "=== API Routing Tests ==="
          echo "Testing simple backend API rewrite via /api/simple-backend..."
          SIMPLE_BACKEND_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/simple-backend" 2>&1 || echo "curl_failed")
          if [ "$SIMPLE_BACKEND_RESPONSE" != "curl_failed" ]; then
            if echo "$SIMPLE_BACKEND_RESPONSE" | grep -q "minimal_backend_test\|api_path.*simple-backend"; then
              echo "✅ Simple backend API rewrite is working"
              echo "This confirms API routing works to backend-style files"
            else
              echo "❌ Simple backend API rewrite failed"  
              echo "Response (first 500 chars): ${SIMPLE_BACKEND_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach /api/simple-backend"
          fi
          
          # Test minimal backend rewrite
          echo "Testing minimal backend API rewrite via /api/minimal..."
          MINIMAL_BACKEND_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/minimal" 2>&1 || echo "curl_failed")
          if [ "$MINIMAL_BACKEND_RESPONSE" != "curl_failed" ]; then
            if echo "$MINIMAL_BACKEND_RESPONSE" | grep -q "Minimal Backend Index Test\|debug_steps"; then
              echo "✅ Minimal backend API rewrite is working"
              echo "This shows API routing to backend-style files with debugging"
            else
              echo "❌ Minimal backend API rewrite failed"  
              echo "Response (first 500 chars): ${MINIMAL_BACKEND_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach /api/minimal"
          fi
          
           # Test routing-test.php directly first
          echo "Testing routing-test.php directly..."
          ROUTING_DIRECT_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/routing-test.php" 2>&1 || echo "curl_failed")
          if [ "$ROUTING_DIRECT_RESPONSE" != "curl_failed" ]; then
            echo "✅ Direct routing test successful"
            echo "Response (first 300 chars): ${ROUTING_DIRECT_RESPONSE:0:300}..."
          else
            echo "❌ Direct routing test failed"
          fi
          echo ""
          
          # Test simple rewrite rule first  
          echo "Testing simple rewrite rule via /test-rewrite..."
          SIMPLE_REWRITE_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/test-rewrite" 2>&1 || echo "curl_failed")
          if [ "$SIMPLE_REWRITE_RESPONSE" != "curl_failed" ]; then
            if echo "$SIMPLE_REWRITE_RESPONSE" | grep -q "PHP is working"; then
              echo "✅ Simple rewrite rule is working"
              echo "This confirms .htaccess is processed by the server"
            else
              echo "❌ Simple rewrite rule failed"
              echo "Response (first 300 chars): ${SIMPLE_REWRITE_RESPONSE:0:300}"
            fi
          else
            echo "❌ Could not reach /test-rewrite"
          fi
          echo ""
          
          # Test intermediate API rewrite to a simple file
          echo "Testing intermediate API rewrite via /api/test..."
          API_SIMPLE_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/test" 2>&1 || echo "curl_failed")
          if [ "$API_SIMPLE_RESPONSE" != "curl_failed" ]; then
            if echo "$API_SIMPLE_RESPONSE" | grep -q "api_path.*test\|routing test"; then
              echo "✅ Intermediate API rewrite is working"
              echo "This confirms API routing works to simple PHP files"
            else
              echo "❌ Intermediate API rewrite failed"
              echo "Response (first 500 chars): ${API_SIMPLE_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach /api/test"
          fi
          echo ""
          
          
          
          # Test filesystem structure diagnostic
          echo "Testing filesystem-diagnostic.php..."
          FILESYSTEM_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/filesystem-diagnostic.php" 2>&1 || echo "curl_failed")
          if [ "$FILESYSTEM_RESPONSE" != "curl_failed" ]; then
            if echo "$FILESYSTEM_RESPONSE" | grep -q "File system diagnostic\|backend_search\|vendor_search"; then
              echo "✅ Filesystem diagnostic successful"
              # Check for backend directory
              if echo "$FILESYSTEM_RESPONSE" | grep -q "backend.*exists.*true"; then
                echo "✅ Backend directory found on server"
              else
                echo "⚠️  Backend directory may not exist on server"  
              fi
              # Check for vendor directory
              if echo "$FILESYSTEM_RESPONSE" | grep -q "vendor.*exists.*true\|autoloader.*true"; then
                echo "✅ Vendor directory found on server"
              else
                echo "⚠️  Vendor directory not found on server"
              fi
            else
              echo "❌ Filesystem diagnostic unexpected response"
              echo "Response (first 500 chars): ${FILESYSTEM_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach filesystem-diagnostic.php"
          fi
          echo ""
          
          # Test backend diagnostics without framework
          echo "Testing backend-diagnostics.php..."
          BACKEND_DIAG_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/backend-diagnostics.php" 2>&1 || echo "curl_failed")
          if [ "$BACKEND_DIAG_RESPONSE" != "curl_failed" ]; then
            if echo "$BACKEND_DIAG_RESPONSE" | grep -q "Backend diagnostics\|autoloader\|vendor_exists"; then
              echo "✅ Backend diagnostics successful"
              # Check for specific issues
              if echo "$BACKEND_DIAG_RESPONSE" | grep -q "vendor_exists.*false\|autoloader.*not_found"; then
                echo "⚠️  Composer dependencies may be missing"
              fi
              if echo "$BACKEND_DIAG_RESPONSE" | grep -q "env_exists.*false\|environment.*not_found"; then
                echo "⚠️  Environment file may be missing"  
              fi
            else
              echo "❌ Backend diagnostics unexpected response"
              echo "Response (first 500 chars): ${BACKEND_DIAG_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach backend-diagnostics.php"
          fi
          echo ""
          
          # Test minimal backend API routing
          echo "Testing minimal backend via /api/health..."
          MINIMAL_API_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/health" 2>&1 || echo "curl_failed")
          if [ "$MINIMAL_API_RESPONSE" != "curl_failed" ]; then
            if echo "$MINIMAL_API_RESPONSE" | grep -q "Minimal backend\|minimal_backend\|success.*true"; then
              echo "✅ Minimal backend API routing is working"
              echo "This confirms the API infrastructure is functional"
            else
              echo "❌ Minimal backend API may not be working properly"
              echo "Response (first 500 chars): ${MINIMAL_API_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach minimal backend API"
          fi
          echo ""
          
          # Test debug endpoint
          echo "Testing debug endpoint for routing troubleshooting..."
          DEBUG_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/health?debug=1" 2>&1 || echo "curl_failed")
          if [ "$DEBUG_RESPONSE" != "curl_failed" ] && [ -n "$DEBUG_RESPONSE" ]; then
            echo "Debug response (first 500 chars): ${DEBUG_RESPONSE:0:500}"
          else
            echo "❌ No debug response"
          fi
          echo ""
          
          # Test API health endpoint
          echo "Testing API health endpoint..."
          HEALTH_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/health" 2>&1 || echo "curl_failed")
          if [ "$HEALTH_RESPONSE" != "curl_failed" ] && echo "$HEALTH_RESPONSE" | grep -q "success\|healthy"; then
            echo "✅ API health check passed"
            echo "$HEALTH_RESPONSE"
          else
            echo "❌ API health check failed"
            echo "Actual response from /api/health (first 500 chars): ${HEALTH_RESPONSE:0:500}"
          fi
          echo ""
          
          # Test database connectivity through API
          echo "=== Database Test ==="
          echo "Testing database connectivity..."
          DB_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/auth/send-otp" \
               -H "Content-Type: application/json" \
               -d '{"phone":"+1234567890"}' 2>&1 || echo "curl_failed")
          if [ "$DB_RESPONSE" != "curl_failed" ] && echo "$DB_RESPONSE" | grep -q "success\|error\|validation"; then
            echo "✅ Database API endpoint responding"
            echo "Response: ${DB_RESPONSE:0:200}"
          else
            echo "⚠️  Database connectivity test inconclusive"
            echo "Response: ${DB_RESPONSE:0:200}"
          fi
          
          # Test frontend routing
          echo "=== Frontend Test ==="
          echo "Testing frontend routing..."
          FRONTEND_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}" 2>&1 || echo "curl_failed")
          if [ "$FRONTEND_RESPONSE" != "curl_failed" ] && echo "$FRONTEND_RESPONSE" | grep -q "<!DOCTYPE\|<html"; then
            echo "✅ Frontend routing test passed"
          else
            echo "❌ Frontend routing test failed"
            echo "Frontend response (first 200 chars): ${FRONTEND_RESPONSE:0:200}"
          fi
          
          echo ""
          echo "=== Health Check Summary ==="
          echo "✅ All health checks completed (some may have failed - check details above)"
          echo "🔍 If issues persist, check the detailed responses above for debugging"
          
          # Test static asset serving
          echo "Testing static asset serving..."
          if curl -f -s "${{ env.FRONTEND_URL }}/assets/" -o /dev/null 2>/dev/null; then
            echo "✅ Static assets test passed"
          else
            echo "⚠️  Static assets test inconclusive"
          fi
          
          echo "Health check summary completed"