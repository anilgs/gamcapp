name: Deploy to Hostinger

on:
  push:
    branches:
      - main
      - develop
      - 'release/*'
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'
  FTP_HOST: ${{ vars.FTP_HOST }}
  FTP_USERNAME: ${{ vars.FTP_USERNAME }}
  FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
  SMTP_HOST: ${{ vars.SMTP_HOST }}
  SMTP_PORT: ${{ vars.SMTP_PORT }}
  SMTP_SECURE: ${{ vars.SMTP_SECURE }}
  ADMIN_EMAIL: ${{ vars.ADMIN_EMAIL }}
  FROM_EMAIL: ${{ vars.FROM_EMAIL }}
  FROM_NAME: ${{ vars.FROM_NAME }}
  DB_HOST: ${{ vars.DB_HOST }}
  DB_PORT: ${{ vars.DB_PORT }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_USER: ${{ vars.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  FRONTEND_URL: ${{ vars.FRONTEND_URL }}
  RAZORPAY_KEY_ID: ${{ secrets.RAZORPAY_KEY_ID }}
  RAZORPAY_KEY_SECRET: ${{ secrets.RAZORPAY_KEY_SECRET }}
  DOMAIN: ${{ vars.DOMAIN }}

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pgsql, curl, json
          tools: composer

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: composer install --no-dev --optimize-autoloader

      - name: Run frontend type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run PHP syntax check
        working-directory: ./backend
        run: find src -name "*.php" -exec php -l {} \;

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer

      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          
          # Ensure vendor directory is properly created for shared hosting
          composer dump-autoload --optimize --no-dev
          
          # Verify critical dependencies are installed
          echo "Verifying Composer dependencies..."
          php -r "require 'vendor/autoload.php'; echo 'Autoloader working correctly\n';"

      - name: Create deployment package
        run: |
          echo "=== Pre-deployment Backend Verification ==="
          echo "Backend directory contents:"
          ls -la backend/ || echo "Backend directory not found"
          echo ""
          echo "Checking for vendor directory:"
          if [ -d "backend/vendor" ]; then
            echo "✅ Vendor directory exists"
            echo "Vendor size: $(du -sh backend/vendor)"
            echo "Autoloader exists: $(test -f backend/vendor/autoload.php && echo 'yes' || echo 'no')"
          else
            echo "❌ Vendor directory missing before deployment"
          fi
          echo ""
          
          echo "=== Creating Deployment Package ==="
          mkdir -p deployment
          cp -r frontend/dist/* deployment/
          cp -r backend deployment/
          cp apache-config/.htaccess deployment/
          
          # Add PHP test files for debugging
          cp phpinfo.php deployment/
          cp simple-test.php deployment/
          cp routing-test.php deployment/
          cp backend-diagnostics.php deployment/

          # Create environment file for development
          echo "DB_HOST=${{ env.DB_HOST }}" >> deployment/backend/.env
          echo "DB_PORT=${{ env.DB_PORT }}" >> deployment/backend/.env
          echo "DB_NAME=${{ env.DB_NAME }}" >> deployment/backend/.env
          echo "DB_USER=${{ env.DB_USER }}" >> deployment/backend/.env
          echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> deployment/backend/.env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> deployment/backend/.env
          echo "APP_ENV=development" >> deployment/backend/.env
          echo "RAZORPAY_KEY_ID=${{ env.RAZORPAY_KEY_ID }}" >> deployment/backend/.env
          echo "RAZORPAY_KEY_SECRET=${{ env.RAZORPAY_KEY_SECRET }}" >> deployment/backend/.env
          echo "FRONTEND_URL=${{ env.FRONTEND_URL }}" >> deployment/backend/.env
          echo "SMTP_HOST=${{ env.SMTP_HOST }}" >> deployment/backend/.env
          echo "SMTP_PORT=${{ env.SMTP_PORT }}" >> deployment/backend/.env
          echo "SMTP_SECURE=${{ env.SMTP_SECURE }}" >> deployment/backend/.env
          echo "ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}" >> deployment/backend/.env
          echo "FROM_EMAIL=${{ env.FROM_EMAIL }}" >> deployment/backend/.env
          echo "FROM_NAME=${{ env.FROM_NAME }}" >> deployment/backend/.env
          echo "BYPASS_PHONE_VERIFICATION=true" >> deployment/backend/.env
          
      - name: Deploy to Hostinger via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_HOST }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: /public_html/dev/

      - name: Initialize Database
        run: |
          echo "Checking database connectivity and initialization status for development..."
          
          # Install MySQL client for database operations
          sudo apt-get update && sudo apt-get install -y mysql-client netcat-openbsd
          
          # Check if database exists and needs initialization
          DB_EXISTS=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='${{ env.DB_NAME }}';" \
                      --skip-column-names --batch 2>/dev/null | wc -l)
          
          if [ "$DB_EXISTS" -eq 0 ]; then
            echo "Database '${{ env.DB_NAME }}' does not exist. Creating and initializing..."
            
            # Create database
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  -e "CREATE DATABASE IF NOT EXISTS \`${{ env.DB_NAME }}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            
            # Apply schema
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  "${{ env.DB_NAME }}" < backend/database/schema.sql
            
            # Apply seed data if exists
            if [ -f "backend/database/seed.sql" ]; then
              echo "Applying seed data..."
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/seed.sql
            fi
            
            echo "Database initialization completed successfully!"
          else
            echo "Database '${{ env.DB_NAME }}' already exists."
            
            # Check if database has required tables
            TABLE_COUNT=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                          "${{ env.DB_NAME }}" -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='${{ env.DB_NAME }}';" \
                          --skip-column-names --batch 2>/dev/null)
            
            if [ "$TABLE_COUNT" -lt 4 ]; then
              echo "Database exists but appears empty (found $TABLE_COUNT tables). Initializing schema..."
              
              # Apply schema
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/schema.sql
              
              # Apply seed data if exists
              if [ -f "backend/database/seed.sql" ]; then
                echo "Applying seed data..."
                mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      "${{ env.DB_NAME }}" < backend/database/seed.sql
              fi
              
              echo "Database schema initialization completed!"
            else
              echo "Database is properly initialized with $TABLE_COUNT tables."
            fi
          fi
          
          # Verify database setup
          echo "Verifying database setup..."
          TABLES=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                   "${{ env.DB_NAME }}" -e "SHOW TABLES;" --skip-column-names --batch 2>/dev/null)
          echo "Database tables found:"
          echo "$TABLES"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer

      - name: Install and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          
          # Ensure vendor directory is properly created for shared hosting
          composer dump-autoload --optimize --no-dev
          
          # Verify critical dependencies are installed
          echo "Verifying Composer dependencies..."
          php -r "require 'vendor/autoload.php'; echo 'Autoloader working correctly\n';"

      - name: Create deployment package
        run: |
          echo "=== Pre-deployment Backend Verification ==="
          echo "Backend directory contents:"
          ls -la backend/ || echo "Backend directory not found"
          echo ""
          echo "Checking for vendor directory:"
          if [ -d "backend/vendor" ]; then
            echo "✅ Vendor directory exists"
            echo "Vendor size: $(du -sh backend/vendor)"
            echo "Autoloader exists: $(test -f backend/vendor/autoload.php && echo 'yes' || echo 'no')"
          else
            echo "❌ Vendor directory missing before deployment"
          fi
          echo ""
          
          echo "=== Creating Deployment Package ==="
          mkdir -p deployment
          cp -r frontend/dist/* deployment/
          cp -r backend deployment/
          cp apache-config/.htaccess deployment/
          
          # Add PHP test files for debugging
          cp phpinfo.php deployment/
          cp simple-test.php deployment/
          cp routing-test.php deployment/
          cp backend-diagnostics.php deployment/
          
          # Create environment file for production
          echo "DB_HOST=${{ env.DB_HOST }}" >> deployment/backend/.env
          echo "DB_PORT=${{ env.DB_PORT }}" >> deployment/backend/.env
          echo "DB_NAME=${{ env.DB_NAME }}" >> deployment/backend/.env
          echo "DB_USER=${{ env.DB_USER }}" >> deployment/backend/.env
          echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> deployment/backend/.env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> deployment/backend/.env
          echo "APP_ENV=production" >> deployment/backend/.env
          echo "RAZORPAY_KEY_ID=${{ env.RAZORPAY_KEY_ID }}" >> deployment/backend/.env
          echo "RAZORPAY_KEY_SECRET=${{ env.RAZORPAY_KEY_SECRET }}" >> deployment/backend/.env
          echo "FRONTEND_URL=${{ env.FRONTEND_URL }}" >> deployment/backend/.env
          echo "SMTP_HOST=${{ env.SMTP_HOST }}" >> deployment/backend/.env
          echo "SMTP_PORT=${{ env.SMTP_PORT }}" >> deployment/backend/.env
          echo "SMTP_SECURE=${{ env.SMTP_SECURE }}" >> deployment/backend/.env
          echo "SMTP_USER=${{ env.SMTP_USER }}" >> deployment/backend/.env
          echo "SMTP_PASS=${{ env.SMTP_PASS }}" >> deployment/backend/.env
          echo "ADMIN_EMAIL=${{ env.ADMIN_EMAIL }}" >> deployment/backend/.env
          echo "FROM_EMAIL=${{ env.FROM_EMAIL }}" >> deployment/backend/.env
          echo "FROM_NAME=${{ env.FROM_NAME }}" >> deployment/backend/.env
          echo "BYPASS_PHONE_VERIFICATION=true" >> deployment/backend/.env
          echo "FTP_HOST=${{ env.FTP_HOST }}" >> deployment/backend/.env
          echo "FTP_USERNAME=${{ env.FTP_USERNAME }}" >> deployment/backend/.env
          echo "FTP_PASSWORD=${{ env.FTP_PASSWORD }}" >> deployment/backend/.env

      - name: Verify Deployment Package
        run: |
          echo "=== Deployment Package Verification ==="
          echo "Checking deployment directory structure..."
          
          if [ -d "deployment" ]; then
            echo "✅ Deployment directory exists"
            echo "Contents:"
            find deployment -type f | head -20
            echo ""
            
            # Check critical files
            if [ -f "deployment/.htaccess" ]; then
              echo "✅ .htaccess file present"
            else
              echo "❌ .htaccess file missing"
            fi
            
            if [ -f "deployment/index.html" ]; then
              echo "✅ Frontend index.html present"
            else
              echo "❌ Frontend index.html missing"
            fi
            
            if [ -f "deployment/backend/public/index.php" ]; then
              echo "✅ Backend index.php present"
            else
              echo "❌ Backend index.php missing"
            fi
            
            if [ -f "deployment/backend/.env" ]; then
              echo "✅ Backend .env file present"
              echo "Environment variables count: $(wc -l < deployment/backend/.env)"
              echo "File size: $(ls -lh deployment/backend/.env 2>/dev/null | awk '{print $5}')"
              echo "Contains DB_HOST: $(grep -q 'DB_HOST=' deployment/backend/.env && echo 'yes' || echo 'no')"
            else
              echo "❌ Backend .env file missing"
              echo "Backend directory contents:"
              ls -la deployment/backend/ 2>/dev/null || echo "backend directory not accessible"
            fi
            
            if [ -f "deployment/backend/vendor/autoload.php" ]; then
              echo "✅ Composer vendor directory present"
              echo "Vendor directory size: $(du -sh deployment/backend/vendor 2>/dev/null || echo 'unknown')"
              echo "Autoloader file size: $(ls -lh deployment/backend/vendor/autoload.php 2>/dev/null || echo 'file not found')"
            else
              echo "❌ Composer vendor directory missing"
              echo "Backend directory contents:"
              ls -la deployment/backend/ 2>/dev/null || echo "backend directory not accessible"
              echo "Looking for vendor directory:"
              find deployment/backend -name "vendor" -type d 2>/dev/null || echo "No vendor directory found"
            fi
            
          else
            echo "❌ Deployment directory does not exist!"
          fi

      - name: Deploy to Hostinger via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.FTP_HOST }}
          username: ${{ env.FTP_USERNAME }}
          password: ${{ env.FTP_PASSWORD }}
          local-dir: ./deployment/
          server-dir: /domains/${{ env.DOMAIN }}/public_html/

      - name: Initialize Database
        run: |
          echo "Checking database connectivity and initialization status..."
          
          # Install MySQL client for database operations
          sudo apt-get update && sudo apt-get install -y mysql-client netcat-openbsd
          
          # Check if database exists and needs initialization
          DB_EXISTS=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      -e "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='${{ env.DB_NAME }}';" \
                      --skip-column-names --batch 2>/dev/null | wc -l)
          
          if [ "$DB_EXISTS" -eq 0 ]; then
            echo "Database '${{ env.DB_NAME }}' does not exist. Creating and initializing..."
            
            # Create database
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  -e "CREATE DATABASE IF NOT EXISTS \`${{ env.DB_NAME }}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            
            # Apply schema
            mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                  "${{ env.DB_NAME }}" < backend/database/schema.sql
            
            # Apply seed data if exists
            if [ -f "backend/database/seed.sql" ]; then
              echo "Applying seed data..."
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/seed.sql
            fi
            
            echo "Database initialization completed successfully!"
          else
            echo "Database '${{ env.DB_NAME }}' already exists."
            
            # Check if database has required tables
            TABLE_COUNT=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                          "${{ env.DB_NAME }}" -e "SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='${{ env.DB_NAME }}';" \
                          --skip-column-names --batch 2>/dev/null)
            
            if [ "$TABLE_COUNT" -lt 4 ]; then
              echo "Database exists but appears empty (found $TABLE_COUNT tables). Initializing schema..."
              
              # Apply schema
              mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                    "${{ env.DB_NAME }}" < backend/database/schema.sql
              
              # Apply seed data if exists
              if [ -f "backend/database/seed.sql" ]; then
                echo "Applying seed data..."
                mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                      "${{ env.DB_NAME }}" < backend/database/seed.sql
              fi
              
              echo "Database schema initialization completed!"
            else
              echo "Database is properly initialized with $TABLE_COUNT tables."
            fi
          fi
          
          # Verify database setup
          echo "Verifying database setup..."
          TABLES=$(mysql -h"${{ env.DB_HOST }}" -P"${{ env.DB_PORT }}" -u"${{ env.DB_USER }}" -p"${{ env.DB_PASSWORD }}" \
                   "${{ env.DB_NAME }}" -e "SHOW TABLES;" --skip-column-names --batch 2>/dev/null)
          echo "Database tables found:"
          echo "$TABLES"

      - name: Setup PHP Environment (Post-Deployment)
        run: |
          echo "PHP environment setup completed via FTP deployment."
          echo "Note: Shared hosting providers typically handle PHP configuration automatically."
          echo "Composer autoloader optimization and file permissions are set during FTP upload."
          
          # Log deployment completion
          echo "✅ Backend files deployed to: /domains/${{ env.DOMAIN }}/public_html/backend/"
          echo "✅ Frontend files deployed to: /domains/${{ env.DOMAIN }}/public_html/"
          echo "✅ Environment file created with production settings"
          echo "✅ Apache .htaccess configuration deployed"

      - name: Comprehensive Health Check
        run: |
          set +e  # Don't exit on errors, continue with all tests
          
          echo "Running comprehensive health checks..."
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          # Basic connectivity test
          echo "=== Basic Connectivity Test ==="
          if curl -I -s "${{ env.FRONTEND_URL }}" | head -1; then
            echo "✅ Domain is accessible"
          else
            echo "❌ Domain not accessible"
          fi
          echo ""
          
          # Test file structure
          echo "=== File Structure Tests ==="
          
          # Test .htaccess
          echo "Testing .htaccess accessibility..."
          curl -I -s "${{ env.FRONTEND_URL }}/.htaccess" | head -1 || echo "❌ .htaccess not accessible (expected)"
          
          # Test backend directory
          echo "Testing backend directory..."
          curl -I -s "${{ env.FRONTEND_URL }}/backend/" | head -1 || echo "❌ Backend directory not accessible"
          
          # Test backend/public directory
          echo "Testing backend/public directory..."
          curl -I -s "${{ env.FRONTEND_URL }}/backend/public/" | head -1 || echo "❌ Backend/public directory not accessible"
          
          # Test simple PHP file first
          echo "Testing simple PHP test file..."
          TEST_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/backend/public/test.php" 2>&1 || echo "curl_failed")
          if echo "$TEST_RESPONSE" | grep -q "PHP is working correctly"; then
            echo "✅ PHP execution confirmed"
            echo "$TEST_RESPONSE" | head -10
          elif echo "$TEST_RESPONSE" | grep -q "curl_failed"; then
            echo "❌ Could not reach PHP test file"
          else
            echo "❌ PHP execution failed or unexpected response"
            echo "Response (first 500 chars): ${TEST_RESPONSE:0:500}"
          fi
          echo ""
          
          # Test index.php directly
          echo "Testing backend index.php directly..."
          RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/backend/public/index.php?api_path=health&debug=1" 2>&1 || echo "curl_failed")
          if [ "$RESPONSE" != "curl_failed" ] && [ -n "$RESPONSE" ]; then
            echo "✅ PHP index.php accessible"
            echo "Response (first 300 chars): ${RESPONSE:0:300}"
          else
            echo "❌ No response from PHP index.php"
          fi
          echo ""
          
          # Test simple PHP file
          echo "=== PHP Execution Test ==="
          echo "Testing basic PHP execution..."
          
          # Test super simple PHP file first
          echo "Testing simple-test.php..."
          SIMPLE_PHP_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/simple-test.php" 2>&1 || echo "curl_failed")
          if [ "$SIMPLE_PHP_RESPONSE" != "curl_failed" ]; then
            if echo "$SIMPLE_PHP_RESPONSE" | grep -q "PHP is working"; then
              echo "✅ Simple PHP test working"
              echo "Response: ${SIMPLE_PHP_RESPONSE}"
            else
              echo "❌ Simple PHP test failed"
              echo "Response (first 500 chars): ${SIMPLE_PHP_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach simple-test.php"
          fi
          echo ""
          
          # Test phpinfo
          echo "Testing phpinfo.php..."
          PHPINFO_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/phpinfo.php" 2>&1 || echo "curl_failed")
          if [ "$PHPINFO_RESPONSE" != "curl_failed" ]; then
            if echo "$PHPINFO_RESPONSE" | grep -q "PHP Version"; then
              echo "✅ phpinfo.php working"
              echo "PHP Version detected in response"
            else
              echo "❌ phpinfo.php not working properly"
              echo "Response (first 500 chars): ${PHPINFO_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach phpinfo.php"
          fi
          echo ""
          
          # Test backend index.php
          echo "Testing backend/public/index.php..."
          PHP_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/backend/public/index.php" 2>&1 || echo "curl_failed")
          if [ "$PHP_RESPONSE" != "curl_failed" ]; then
            if echo "$PHP_RESPONSE" | grep -q "Route not found\|debug\|health\|success"; then
              echo "✅ Backend PHP is executing"
              echo "Response snippet: ${PHP_RESPONSE:0:200}..."
            else
              echo "❌ Backend PHP not executing or returning unexpected content"
              echo "Full response (first 500 chars): ${PHP_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach backend PHP file"
          fi
          echo ""
          
          # Test API routing
          echo "=== API Routing Tests ==="
          
          # Test routing-test.php directly first
          echo "Testing routing-test.php directly..."
          ROUTING_DIRECT_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/routing-test.php" 2>&1 || echo "curl_failed")
          if [ "$ROUTING_DIRECT_RESPONSE" != "curl_failed" ]; then
            echo "✅ Direct routing test successful"
            echo "Response (first 300 chars): ${ROUTING_DIRECT_RESPONSE:0:300}..."
          else
            echo "❌ Direct routing test failed"
          fi
          echo ""
          
          # Test simple rewrite rule first  
          echo "Testing simple rewrite rule via /test-rewrite..."
          SIMPLE_REWRITE_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/test-rewrite" 2>&1 || echo "curl_failed")
          if [ "$SIMPLE_REWRITE_RESPONSE" != "curl_failed" ]; then
            if echo "$SIMPLE_REWRITE_RESPONSE" | grep -q "PHP is working"; then
              echo "✅ Simple rewrite rule is working"
              echo "This confirms .htaccess is processed by the server"
            else
              echo "❌ Simple rewrite rule failed"
              echo "Response (first 300 chars): ${SIMPLE_REWRITE_RESPONSE:0:300}"
            fi
          else
            echo "❌ Could not reach /test-rewrite"
          fi
          echo ""
          
          # Test .htaccess rewrite by accessing through /api/routing-test
          echo "Testing .htaccess rewrite via /api/routing-test..."
          REWRITE_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/routing-test" 2>&1 || echo "curl_failed")
          if [ "$REWRITE_RESPONSE" != "curl_failed" ]; then
            if echo "$REWRITE_RESPONSE" | grep -q "rewrite is working\|backend_routing_test\|success.*true"; then
              echo "✅ .htaccess rewrite is working"
              echo "Response contains expected rewrite indicators"
            else
              echo "❌ .htaccess rewrite may not be working properly"
              echo "Response (first 500 chars): ${REWRITE_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach /api/routing-test"
          fi
          echo ""
          
          # Test backend diagnostics without framework
          echo "Testing backend-diagnostics.php..."
          BACKEND_DIAG_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/backend-diagnostics.php" 2>&1 || echo "curl_failed")
          if [ "$BACKEND_DIAG_RESPONSE" != "curl_failed" ]; then
            if echo "$BACKEND_DIAG_RESPONSE" | grep -q "Backend diagnostics\|autoloader\|vendor_exists"; then
              echo "✅ Backend diagnostics successful"
              # Check for specific issues
              if echo "$BACKEND_DIAG_RESPONSE" | grep -q "vendor_exists.*false\|autoloader.*not_found"; then
                echo "⚠️  Composer dependencies may be missing"
              fi
              if echo "$BACKEND_DIAG_RESPONSE" | grep -q "env_exists.*false\|environment.*not_found"; then
                echo "⚠️  Environment file may be missing"  
              fi
            else
              echo "❌ Backend diagnostics unexpected response"
              echo "Response (first 500 chars): ${BACKEND_DIAG_RESPONSE:0:500}"
            fi
          else
            echo "❌ Could not reach backend-diagnostics.php"
          fi
          echo ""
          
          # Test debug endpoint
          echo "Testing debug endpoint for routing troubleshooting..."
          DEBUG_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/health?debug=1" 2>&1 || echo "curl_failed")
          if [ "$DEBUG_RESPONSE" != "curl_failed" ] && [ -n "$DEBUG_RESPONSE" ]; then
            echo "Debug response (first 500 chars): ${DEBUG_RESPONSE:0:500}"
          else
            echo "❌ No debug response"
          fi
          echo ""
          
          # Test API health endpoint
          echo "Testing API health endpoint..."
          HEALTH_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/health" 2>&1 || echo "curl_failed")
          if [ "$HEALTH_RESPONSE" != "curl_failed" ] && echo "$HEALTH_RESPONSE" | grep -q "success\|healthy"; then
            echo "✅ API health check passed"
            echo "$HEALTH_RESPONSE"
          else
            echo "❌ API health check failed"
            echo "Actual response from /api/health (first 500 chars): ${HEALTH_RESPONSE:0:500}"
          fi
          echo ""
          
          # Test database connectivity through API
          echo "=== Database Test ==="
          echo "Testing database connectivity..."
          DB_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}/api/auth/send-otp" \
               -H "Content-Type: application/json" \
               -d '{"phone":"+1234567890"}' 2>&1 || echo "curl_failed")
          if [ "$DB_RESPONSE" != "curl_failed" ] && echo "$DB_RESPONSE" | grep -q "success\|error\|validation"; then
            echo "✅ Database API endpoint responding"
            echo "Response: ${DB_RESPONSE:0:200}"
          else
            echo "⚠️  Database connectivity test inconclusive"
            echo "Response: ${DB_RESPONSE:0:200}"
          fi
          
          # Test frontend routing
          echo "=== Frontend Test ==="
          echo "Testing frontend routing..."
          FRONTEND_RESPONSE=$(curl -s "${{ env.FRONTEND_URL }}" 2>&1 || echo "curl_failed")
          if [ "$FRONTEND_RESPONSE" != "curl_failed" ] && echo "$FRONTEND_RESPONSE" | grep -q "<!DOCTYPE\|<html"; then
            echo "✅ Frontend routing test passed"
          else
            echo "❌ Frontend routing test failed"
            echo "Frontend response (first 200 chars): ${FRONTEND_RESPONSE:0:200}"
          fi
          
          echo ""
          echo "=== Health Check Summary ==="
          echo "✅ All health checks completed (some may have failed - check details above)"
          echo "🔍 If issues persist, check the detailed responses above for debugging"
          
          # Test static asset serving
          echo "Testing static asset serving..."
          if curl -f -s "${{ env.FRONTEND_URL }}/assets/" -o /dev/null 2>/dev/null; then
            echo "✅ Static assets test passed"
          else
            echo "⚠️  Static assets test inconclusive"
          fi
          
          echo "Health check summary completed"