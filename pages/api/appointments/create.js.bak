const { requireAuth } = require('../../../lib/auth');
const User = require('../../../lib/models/User');

async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: 'Method not allowed'
    });
  }

  try {
    const {
      firstName,
      lastName,
      dateOfBirth,
      nationality,
      gender,
      maritalStatus,
      passportNumber,
      confirmPassportNumber,
      passportIssueDate,
      passportIssuePlace,
      passportExpiryDate,
      visaType,
      email,
      phone,
      nationalId,
      positionAppliedFor,
      country,
      city,
      countryTravelingTo,
      appointmentType,
      medicalCenter,
      appointmentDate
    } = req.body;

    // Validate required fields
    const requiredFields = [
      'firstName', 'lastName', 'dateOfBirth', 'nationality', 'gender', 'maritalStatus',
      'passportNumber', 'passportIssueDate', 'passportIssuePlace', 'passportExpiryDate',
      'visaType', 'email', 'phone', 'country', 'countryTravelingTo', 'appointmentType',
      'medicalCenter', 'appointmentDate'
    ];

    const missingFields = requiredFields.filter(field => !req.body[field]);
    if (missingFields.length > 0) {
      return res.status(400).json({
        success: false,
        error: `Missing required fields: ${missingFields.join(', ')}`
      });
    }

    // Validate passport number confirmation
    if (passportNumber !== confirmPassportNumber) {
      return res.status(400).json({
        success: false,
        error: 'Passport number confirmation does not match'
      });
    }

    // Get user from token
    const userId = req.user.id;

    // Prepare comprehensive appointment details for wafid.com integration
    const appointmentDetails = {
      // Personal Information
      firstName,
      lastName,
      fullName: `${firstName} ${lastName}`,
      dateOfBirth,
      nationality,
      gender,
      maritalStatus,
      
      // Passport Information
      passportNumber,
      passportIssueDate,
      passportIssuePlace,
      passportExpiryDate,
      visaType,
      
      // Contact Information
      email,
      phone,
      nationalId,
      
      // Employment & Travel
      positionAppliedFor,
      country,
      city,
      countryTravelingTo,
      
      // Appointment Details
      appointmentType,
      medicalCenter,
      appointmentDate,
      
      // WAFID Integration Fields
      wafidBookingReady: true,
      submittedAt: new Date().toISOString()
    };

    // Update user with comprehensive appointment details
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }

    // Update user information with all details
    await user.update({
      name: `${firstName} ${lastName}`,
      email,
      phone,
      passport_number: passportNumber,
      appointment_details: appointmentDetails
    });

    console.log(`Appointment created for user: ${userId}`);

    return res.status(200).json({
      success: true,
      message: 'Appointment details saved successfully',
      data: {
        appointmentId: user.id,
        user: {
          id: user.id,
          name: user.name,
          email: user.email,
          phone: user.phone,
          appointment_details: user.appointment_details,
          payment_status: user.payment_status
        }
      }
    });

  } catch (error) {
    console.error('Create appointment error:', error);
    
    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
}

export default requireAuth(handler);
