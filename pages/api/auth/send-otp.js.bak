const { generateOTP, storeOTP, sendSMS, formatPhoneNumber, isValidPhoneNumber, checkOTPRateLimit } = require('../../../lib/auth');

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: 'Method not allowed'
    });
  }

  try {
    const { phone } = req.body;

    // Validate input
    if (!phone) {
      return res.status(400).json({
        success: false,
        error: 'Phone number is required'
      });
    }

    // Format and validate phone number
    const formattedPhone = formatPhoneNumber(phone);
    
    if (!isValidPhoneNumber(formattedPhone)) {
      return res.status(400).json({
        success: false,
        error: 'Invalid phone number format'
      });
    }

    // Check if phone verification bypass is enabled
    const bypassPhoneVerification = process.env.BYPASS_PHONE_VERIFICATION === 'true';
    
    if (bypassPhoneVerification) {
      console.log(`Phone verification bypassed for ${formattedPhone} - OTP: 123456`);
      return res.status(200).json({
        success: true,
        message: 'OTP sent successfully (bypass mode)',
        data: {
          phone: formattedPhone,
          otp: '123456',
          expiresIn: 600
        }
      });
    }

    // Check rate limiting
    if (!checkOTPRateLimit(formattedPhone)) {
      return res.status(429).json({
        success: false,
        error: 'Too many OTP requests. Please try again later.'
      });
    }

    // Generate OTP
    const otp = generateOTP();

    // Store OTP in database
    await storeOTP(formattedPhone, otp);

    // Prepare SMS message
    const message = `Your GAMCA verification code is: ${otp}. This code will expire in 10 minutes. Do not share this code with anyone.`;

    // Send SMS
    try {
      const smsResult = await sendSMS(formattedPhone, message);
      
      if (!smsResult.success) {
        console.error('SMS sending failed:', smsResult);
        return res.status(500).json({
          success: false,
          error: 'Failed to send OTP. Please try again.'
        });
      }

      console.log(`OTP sent successfully to ${formattedPhone}. Message ID: ${smsResult.messageId}`);

      return res.status(200).json({
        success: true,
        message: 'OTP sent successfully',
        data: {
          phone: formattedPhone,
          messageId: smsResult.messageId,
          expiresIn: 600 // 10 minutes in seconds
        }
      });

    } catch (smsError) {
      console.error('SMS sending error:', smsError);
      
      // In development, still return success even if SMS fails
      if (process.env.NODE_ENV === 'development') {
        console.log(`Development mode - OTP for ${formattedPhone}: ${otp}`);
        return res.status(200).json({
          success: true,
          message: 'OTP sent successfully (development mode)',
          data: {
            phone: formattedPhone,
            otp: otp, // Include OTP in development mode for testing
            expiresIn: 600
          }
        });
      }

      return res.status(500).json({
        success: false,
        error: 'Failed to send OTP. Please try again.'
      });
    }

  } catch (error) {
    console.error('Send OTP error:', error);
    
    return res.status(500).json({
      success: false,
      error: 'Internal server error'
    });
  }
}
